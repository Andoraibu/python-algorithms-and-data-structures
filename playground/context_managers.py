

"""
Контекст менеджер защищает, например, список от изменения.
Есть менеджер open(), есть еще какие-то для lock.
А можно свои писать, главное два метода указывать __enter__, __exit__
"""

class DefendList:
    def __init__(self, v):
        self.__v = v

    def __enter__(self):
        """работаю с копией моего списка тут, чтоб не изменять оригинал."""
        self.temp = self.__v[:]

        return self.temp

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is None: # не ссылается ни на что
            self.__v[:] = self.temp # меняю мой оригинал

        return False


arr = [1, 2, 3]
arr2 = [4, 2]


"""
Теперь я пытаюсь перемножить два списка с разной длинной, то, начав перемножаться у меня изменились
бы первые два элемента, а потом выскочила ошибка out of range. И список (т.к. я по ссылке с ним
работал - стал бы [1+=4, 2+=2, 3] => [5, 4, 3], а мне это не надо. Т.е. операции не прошли над
моими данными, я НЕ хочу, чтоб они изменились всё равно, вот так защищаю их менеджером контекста.
"""
try:
    with DefendList(arr) as dl:
        for k, v in enumerate(dl):
            dl[k] += arr2[k]
except Exception as e:
    print(e)



